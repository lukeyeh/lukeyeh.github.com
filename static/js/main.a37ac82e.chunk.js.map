{"version":3,"sources":["ColorModeSwitcher.tsx","Logo.tsx","App.tsx","serviceWorker.ts","reportWebVitals.ts","index.tsx","logo.svg"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","aria-label","spin","keyframes","Logo","img","css","animation","src","logo","App","theme","textAlign","minH","p","justifySelf","spacing","h","pointerEvents","href","target","rel","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"uRAWaA,EAAoB,SAACC,GAAmC,IAC3DC,EAAoBC,yBAApBD,gBACFE,EAAOC,4BAAkB,OAAQ,SACjCC,EAAaD,4BAAkBE,IAAQC,KAE7C,OACE,gBAAC,IAAD,eACEC,KAAK,KACLC,SAAS,KACTC,QAAQ,QACRC,MAAM,UACNC,WAAW,IACXC,QAASZ,EACTa,KAAM,gBAACT,EAAD,MACNU,aAAA,oBAAyBZ,EAAzB,UACIH,K,0KCtBV,IAAMgB,EAAOC,oBAAH,KAKGC,EAAO,SAAClB,GAAD,OAClB,gBAAC,SAAOmB,IAAR,eACEC,IAAK,CACH,iDAAkD,CAChDC,UAAU,GAAD,OAAKL,EAAL,0BAGbM,IAAKC,KACDvB,KCFKwB,EAAM,kBACjB,gBAAC,IAAD,CAAgBC,MAAOA,KACrB,gBAAC,IAAD,MACA,gBAAC,IAAD,CAAKC,UAAU,SAASjB,SAAS,MAC/B,gBAAC,IAAD,CACEkB,KAAK,QACLC,EAAG,GAKH,gBAAC,EAAD,CAAmBC,YAAY,aAC/B,gBAAC,IAAD,CAAQC,QAAS,GACf,gBAAC,EAAD,CAAMC,EAAE,SAASC,cAAc,SAC/B,gBAAC,IAAD,aACO,gBAAC,IAAD,CAAMvB,SAAS,MAAf,eADP,wBAGA,gBAAC,IAAD,CACEE,MAAM,WACNsB,KAAK,wBACLxB,SAAS,MACTyB,OAAO,SACPC,IAAI,uBALN,qBCpBUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DChBN,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,gBAAC,aAAD,KACE,gBAAC,EAAD,OAEFC,SAASC,eAAe,SF8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBZ,MAAK,SAACa,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YEzH5BrB,K,mBCrBAsB,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.a37ac82e.chunk.js","sourcesContent":["import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/core\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher = (props: ColorModeSwitcherProps) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","import * as React from \"react\"\nimport { chakra, keyframes, ImageProps } from \"@chakra-ui/core\"\nimport logo from \"./logo.svg\"\n\nconst spin = keyframes`\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n`\n\nexport const Logo = (props: ImageProps) => (\n  <chakra.img\n    css={{\n      \"@media (prefers-reduced-motion: no-preference)\": {\n        animation: `${spin} infinite 20s linear`,\n      },\n    }}\n    src={logo}\n    {...props}\n  />\n)\n","import * as React from \"react\"\nimport {\n  ChakraProvider,\n  CSSReset,\n  Box,\n  Text,\n  Link,\n  VStack,\n  Code,\n  Grid,\n} from \"@chakra-ui/core\"\nimport theme from \"@chakra-ui/theme\"\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\"\nimport { Logo } from \"./Logo\"\n\nexport const App = () => (\n  <ChakraProvider theme={theme}>\n    <CSSReset />\n    <Box textAlign=\"center\" fontSize=\"xl\">\n      <Grid\n        minH=\"100vh\"\n        p={3}\n        //direction=\"column\"\n        //align=\"center\"\n        //justify=\"center\"\n      >\n        <ColorModeSwitcher justifySelf=\"flex-end\" />\n        <VStack spacing={8}>\n          <Logo h=\"40vmin\" pointerEvents=\"none\" />\n          <Text>\n            Edit <Code fontSize=\"xl\">src/App.tsx</Code> and save to reload.\n          </Text>\n          <Link\n            color=\"teal.500\"\n            href=\"https://chakra-ui.com\"\n            fontSize=\"2xl\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn Chakra\n          </Link>\n        </VStack>\n      </Grid>\n    </Box>\n  </ChakraProvider>\n)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport reportWebVitals from \"./reportWebVitals\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","module.exports = __webpack_public_path__ + \"static/media/logo.c1e81673.svg\";"],"sourceRoot":""}